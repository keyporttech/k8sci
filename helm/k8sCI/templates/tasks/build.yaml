apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build
spec:
  resources:
    inputs:
    - name: git-repo
      type: git
  params:
    - name: org
    - name: repo
    - name: git_sha
    - name: ref
    - name: image
  results:
    - name: status
    - name: description
  steps:
    - name: check-release
      image: "$(params.image)"
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          export AWS_DEFAULT_REGION=us-west-2;
          export GITHUB_USER=$(aws ssm get-parameters --with-decryption  --names /cicd/github_user | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export GITHUB_TOKEN=$(aws ssm get-parameters --with-decryption  --names /cicd/github_token | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export STATE=$(cat /tekton/home/status)
          export DESCRIPTION=$(cat /tekton/home/description)
          export META_REPO_OWNER=$(params.org)
          export META_REPO_NAME=$(params.repo)
          export VERSION=$(make version)
          check-github-release $VERSION;
          RESULT=$?
          [ $RESULT -eq 0 ] && echo "success" > /tekton/home/status || echo "failure" > /tekton/home/status;
          [ $RESULT -ne 0 ] && echo "github release already exists for ${VERSION} - please increment version." > /tekton/home/description;
          exit 0;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: use-artifactory
      workingDir: "/workspace/git-repo"
      image: "167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          set +e;
          export STATE=$(cat /tekton/home/status)
          [ "$STATE" != "success" ] && exit 0;
          echo "installing artifactory creds in ${HOME}/.npmrc";
          export AWS_DEFAULT_REGION=us-west-2;
          export ARTIFACTORY_USER=$(aws ssm get-parameters --with-decryption  --names /cicd/artifactory_user | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export ARTIFACTORY_PASSWORD=$(aws ssm get-parameters --with-decryption  --names /cicd/artifactory_password | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export ARTIFACTORY_URL=$(aws ssm get-parameters --with-decryption  --names /cicd/artifactory_url | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          use-artifactory;
          RESULT=$?
          [ $RESULT -ne 0 ] && echo "error" > /tekton/home/status ;
          [ $RESULT -ne 0 ] && echo "unable to use artifactory" > /tekton/home/description;
          exit $RESULT;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: use-ecr
      image: 167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build
      workingDir: "/workspace/git-repo"
      command:
        - bash
      args:
        - "-cx"
        - |
          set +e;
          export STATE=$(cat /tekton/home/status)
          [ "$STATE" != "success" ] && exit 0;
          use-ecr;
          RESULT=$?
          [ $RESULT -ne 0 ] && echo "error" > /tekton/home/status;
          [ $RESULT -ne 0 ] && echo "unable to configure ecr" > /tekton/home/description;
          exit $RESULT;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: build
      image: "167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build"
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          set +e;
          export STATE=$(cat /tekton/home/status)
          [ "$STATE" != "success" ] && exit 0;
          export AWS_DEFAULT_REGION=us-west-2;
          aws sts get-caller-identity;
          make build;
          RESULT=$?
          [ $RESULT -eq 0 ] && echo "success" > /tekton/home/status || echo "failure" > /tekton/home/status;
          [ $RESULT -eq 0 ] && echo "build succeeded." > /tekton/home/description || echo "build failed." > /tekton/home/description
          exit 0;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket
    - name: infra
      image: "167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build"
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          set +e;
          export STATE=$(cat /tekton/home/status)
          [ "$STATE" != "success" ] && exit 0;
          export AWS_DEFAULT_REGION=us-west-2;

          # Terraform will pull creds from the underlying ec2 instance
          # instead of the assumed role so we define keys
          export AWS_WEB_IDENITY_TOKEN=$(cat ${AWS_WEB_IDENTITY_TOKEN_FILE});
          AWS_SESSION=$(aws sts assume-role-with-web-identity --role-arn ${AWS_ROLE_ARN} --role-session-name build-infra --web-identity-token ${AWS_WEB_IDENITY_TOKEN});
          access_key_id=$(exho $AWS_SESSION | jq .Credentials.AccessKeyId)
          secret_access_key=$(exho $AWS_SESSION | jq .Credentials.SecretAccessKey)
          session_token=$(exho $AWS_SESSION | jq .Credentials.SessionToken)
          export AWS_ACCES_KEY_ID=$(echo $access_key_id | sed -e 's/^"//' | sed -e 's/"$//')
          export SECRET_ACC_KEY=$(echo $secret_access_key | sed -e 's/^"//' | sed -e 's/"$//')
          export SESSION_TOKEN=$(echo $session_token | sed -e 's/^"//' | sed -e 's/"$//')

          make infra;
          RESULT=$?
          [ $RESULT -eq 0 ] && echo "success" > /tekton/home/status || echo "failure" > /tekton/home/status;
          [ $RESULT -eq 0 ] && echo "build succeeded." > /tekton/home/description || echo "build failed." > /tekton/home/description
          exit 0;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket
    - name: post-status
      image: 167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          echo "posting status: status to github";
          export AWS_DEFAULT_REGION=us-west-2;
          export GITHUB_USER=$(aws ssm get-parameters --with-decryption  --names /cicd/github_user | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export GITHUB_TOKEN=$(aws ssm get-parameters --with-decryption  --names /cicd/github_token | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export STATE=$(cat /tekton/home/status)
          export DESCRIPTION=$(cat /tekton/home/description)
          curl -XPOST -u "${GITHUB_USER}:${GITHUB_TOKEN}" -d "{ \"state\":\"${STATE}\", \"description\": \"${DESCRIPTION}\", \"context\":\"watchdog-cicd\"}" https://api.github.com/repos/$(params.org)/$(params.repo)/statuses/$(params.git_sha)
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: report-if-error
      image: 167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          echo "slack notifcation if error";
          export AWS_DEFAULT_REGION=us-west-2;
          export SLACK_WEBHOOK=$(aws ssm get-parameters --with-decryption  --names /cicd/slack_webhook | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export STATE=$(cat /tekton/home/status)
          export DESCRIPTION=$(cat /tekton/home/description)
          export VERSION=$(make version)
          [ "$STATE" != "success" ] && slack-message "$(params.org)/$(params.repo) version=${VERSION} FAILURE: ${STATE}: ${DESCRIPTION}" danger
      volumeMounts:
      - mountPath: /tekton/home
        name: home
  sidecars:
  - image: docker:18.05-dind
    name: server
    securityContext:
      privileged: true
    volumeMounts:
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket
  volumes:
    - name: home
      emptyDir: {}
    - name: dind-storage
      emptyDir: {}
    - name: dind-socket
      emptyDir: {}
