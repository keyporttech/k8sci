apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: release
spec:
  resources:
    inputs:
    - name: git-repo
      type: git
  params:
    - name: org
    - name: repo
    - name: git_sha
    - name: ref
    - name: image
  steps:
    - name: use-artifactory
      workingDir: "/workspace/git-repo"
      image: "$(params.image)"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          set +e;
          echo "installing artifactory creds in ${HOME}/.npmrc";
          export AWS_DEFAULT_REGION=us-west-2;
          export ARTIFACTORY_USER=$(aws ssm get-parameters --with-decryption  --names /cicd/artifactory_user | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export ARTIFACTORY_PASSWORD=$(aws ssm get-parameters --with-decryption  --names /cicd/artifactory_password | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export ARTIFACTORY_URL=$(aws ssm get-parameters --with-decryption  --names /cicd/artifactory_url | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          use-artifactory;
          RESULT=$?
          [ $RESULT -ne 0 ] && echo "error" > /tekton/home/status ;
          [ $RESULT -ne 0 ] && echo "unable to use artifactory" > /tekton/home/description;
          exit $RESULT;
    - name: use-ecr
      image: 167742443741.dkr.ecr.us-west-2.amazonaws.com/node:12.13.0-build
      workingDir: "/workspace/git-repo"
      command:
        - bash
      args:
        - "-cx"
        - |
          set +e;
          use-ecr;
          RESULT=$?
          [ $RESULT -ne 0 ] && echo "error" > /tekton/home/status;
          [ $RESULT -ne 0 ] && echo "unable to configure ecr" > /tekton/home/description;
          exit $RESULT;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: release
      image: "$(params.image)"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          make release
          RESULT=$?
          [ $RESULT -eq 0 ] && echo "success" > /tekton/home/status || echo "failure" > /tekton/home/status;
          [ $RESULT -ne 0 ] && echo "release failed." > /tekton/home/description;
          exit 0;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: github-release
      image: "$(params.image)"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          export AWS_DEFAULT_REGION=us-west-2;
          export GITHUB_USER=$(aws ssm get-parameters --with-decryption  --names /cicd/github_user | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export GITHUB_TOKEN=$(aws ssm get-parameters --with-decryption  --names /cicd/github_token | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export STATE=$(cat /tekton/home/status)
          export DESCRIPTION=$(cat /tekton/home/description)
          export META_REPO_OWNER=$(params.org)
          export META_REPO_NAME=$(params.repo)
          export VERSION=$(make version)
          github_release $VERSION
          RESULT=$?
          [ $RESULT -eq 0 ] && echo "success" > /tekton/home/status || echo "failure" > /tekton/home/status;
          [ $RESULT -ne 0 ] && echo "github release failed." > /tekton/home/description;
          exit 0;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    - name: report
      image: $(params.image)
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          echo "slack notifcation if error";
          export AWS_DEFAULT_REGION=us-west-2;
          export SLACK_WEBHOOK=$(aws ssm get-parameters --with-decryption  --names /cicd/slack_webhook | jq .Parameters[0].Value | sed -e 's/^"//' -e 's/"$//');
          export STATE=$(cat /tekton/home/status)
          export DESCRIPTION=$(cat /tekton/home/description)
          export SLACK_STYLE=$([ "$STATE" != "success"] && echo "" || echo "danger")
          export VERSION = $(make version)
          [ "$STATE" != "success"] slack_message "Release for $(params.org)/$(params.repo): ${STATE} - ${DESCRIPTION}" $SLACK_STYLE

  sidecars:
  - image: docker:18.05-dind
    name: server
    securityContext:
      privileged: true
    volumeMounts:
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket
  volumes:
    - name: home
      emptyDir: {}
    - name: dind-storage
      emptyDir: {}
    - name: dind-socket
      emptyDir: {}
