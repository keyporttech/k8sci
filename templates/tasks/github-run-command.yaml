{{- $fullName := include "k8sCI.fullname" . -}}

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: {{ include "k8sCI.fullname" . }}-run-command-github
  labels:
    {{- include "k8sCI.labels" . | nindent 4 }}
spec:
  resources:
    inputs:
    - name: git-repo
      type: git
  params:
    - name: org
    - name: repo
    - name: git_sha
    - name: ref
    - name: image
    - name: commands
    - name: statuses
    - name: htmlurl
    - name: pipelineName
    - name: pipelineType
  results:
    - name: status
    - name: description
    - name: output
  steps:
    - name: post-pending-status-github
      image: "$(params.image)"
      env:
      {{- range .Values.pipelineEnvSecrets }}
      - name: {{ .name }}
        valueFrom:
          secretKeyRef:
            name: {{ $fullName }}
            key: {{ .name }}
      {{- end }}
      command:
        - "bash"
      args:
        - "-cx"
        - |
          declare -a STATUSES
          STATUSES=($(params.statuses))
          for status in "${STATUSES[@]}"
          do
            :
            # pending,success,error,failure
            # /repos/:owner/:repo/statuses/:sha
            curl -X POST {{ .Values.gitSources.github.apiEndPoint}}/repos/$(params.org)/$(params.repo)/statuses/$(params.git_sha) \
            -H "accept: application/json" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/json" -i -k -d "{\
              \"context\": \"$status\",\
              \"description\": \"pending...\",\
              \"state\": \"pending\"
            }"
    - name: run
      image: "$(params.image)"
      workingDir: "/workspace/git-repo"
      securityContext:
        privileged: true
      env:
      {{- range .Values.pipelineEnvSecrets }}
      - name: {{ .name }}
        valueFrom:
          secretKeyRef:
            name: {{ $fullName }}
            key: {{ .name }}
      {{- end }}
      - name: COMMANDS
        value: "$(params.commands)"
      - name: GIT-REF
        value: $(params.ref)
      command:
        - "bash"
      args:
        - "-cx"
        - |
          set +e;
          RESULT=0
          for command in "${COMMANDS[@]}"
          do
             :
             ${command} &>> /tekton/home/output;
             RESULT=$?;
             [ $RESULT -ne 0 ] && echo "failure" > /tekton/home/status && break
          done
          [ $RESULT -eq 0 ] && echo "success" > /tekton/home/status;
          [ $RESULT -eq 0 ] && echo "succeeded." > /tekton/home/description || echo "build failed." > /tekton/home/description;
          cat /tekton/home/output;
          exit 0;
      volumeMounts:
      - mountPath: /tekton/home
        name: home
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket
      - mountPath: /root/.ssh
        name: ssh-creds
    - name: post-commit-status-github
      image: "$(params.image)"
      env:
      {{- range .Values.pipelineEnvSecrets }}
      - name: {{ .name }}
        valueFrom:
          secretKeyRef:
            name: {{ $fullName }}
            key: {{ .name }}
      {{- end }}
      - name: PIPELINE_RUN
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['tekton.dev/pipelineRun']
      command:
        - "bash"
      args:
        - "-cx"
        - |
          # pending,success,error,failure
          # /repos/:owner/:repo/statuses/:sha
          curl -X POST {{ .Values.gitSources.github.apiEndPoint}}/repos/$(params.org)/$(params.repo)/statuses/$(params.git_sha) \
          -H "accept: application/json" \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Content-Type: application/json" -i -k -d "{\
            \"context\": \"$(params.pipelineName)\",\
            \"description\": \"$(cat /tekton/home/description)\",\
            \"state\": \"$(cat /tekton/home/status)\"
          }"
      volumeMounts:
      - mountPath: /tekton/home
        name: home
    {{- if .Values.notifications.slackWebhook }}
    - name: slack-notify
      image: "registry.keyporttech.com:30243/golang_1.14:0.1.0"
      env:
        - name: SLACK_WEBHOOK
          value: {{ .Values.notifications.slackWebhook }}
        - name: SLACK_USERNAME
          value: "{{ $fullName }}"
        - name: PIPELINE_RUN
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
      workingDir: "/workspace/git-repo"
      command:
        - "bash"
      args:
        - "-cx"
        - |
          export STATUS=$(cat /tekton/home/status);
          [ "$STATUS" != "success" ] && export SYMBOL=":no_entry:" || export SYMBOL=":thumbsup:";
          export SLACK_TITLE="${SYMBOL} github Pipeline: $(params.pipelineName) $(params.pipelineType)\n\nStatus: ${STATUS}\n\nRepo: <$(params.htmlurl)|$(params.org)/$(params.repo)>\n\n<{{ .Values.ingress.dashboardURL }}/#/namespaces/cicd/pipelineruns/${PIPELINE_RUN}|build information>";
          export SLACK_MESSAGE="message: $(params.commands) $(cat /tekton/home/description)";
          [ "$STATUS" != "success" ] && export SLACK_MESSAGE="\`\`\`$(cat /tekton/home/output | tr -d '"' | tr -d "'")\`\`\`";
          PAYLOAD=$( cat <<EOT
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "$SLACK_TITLE"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "$SLACK_MESSAGE"
                }
              }
            ]
          }
          EOT
          );

          curl -d "$PAYLOAD" -H "Content-Type: application/json" -X POST $SLACK_WEBHOOK

      volumeMounts:
      - mountPath: /tekton/home
        name: home
      {{- end }}
  sidecars:
  - image: docker:18.05-dind
    name: server
    securityContext:
      privileged: true
    volumeMounts:
      - mountPath: /var/lib/docker
        name: dind-storage
      - mountPath: /var/run/
        name: dind-socket
  - image: "$(params.image)"
    name: init-ssh-creds
    command:
      - "sh"
    args:
      - "-c"
      - |
        cp /secretsDir/*  /root/.ssh
        mv ~/.ssh/ssh-privatekey ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
    volumeMounts:
      - mountPath: /root/.ssh
        name: ssh-creds
      - mountPath: /secretsDir
        name: git-auth
  volumes:
    - name: home
      emptyDir: {}
    - name: dind-storage
      emptyDir: {}
    - name: dind-socket
      emptyDir: {}
    - name: ssh-creds
      emptyDir: {}
    - name: git-auth
      secret:
        secretName: "{{ $fullName }}-git-auth"
